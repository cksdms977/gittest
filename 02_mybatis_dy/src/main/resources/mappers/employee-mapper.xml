<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="employee">
 
<resultMap type="emp" id="employeeMap">
<!-- 1:1관계  일때에는 association 태그를 이용해서 연결하면 된다.
	result태그의 마지막에 사용
	id태그가 설정되어 있어야 한다.
-->
<id property="empId" column="emp_id"></id> 
 <result property="empName" column="emp_name"/>
 <result property="empNo" column="emp_no"/>
 <!-- <result property="deptCode" column="dept_code"/> -->
 <result property="jobCode" column="job_code"/>
 <result property="salLevel" column="sal_level"/>
 <result property="managerId" column="manager_id"/>
 <result property="hireDate" column="hire_date"/>
 <result property="entDate" column="ent_date"/>
 <result property="entYn" column="ent_yn"/>
 <result property="email" column="email"/>
 <result property="bonus" column="bonus"/>
 <result property="phone" column="phone"/>
  <result property="salary" column="salary"/>
 <association property="dept" resultMap="departmentMap"/>
 </resultMap>
 <resultMap type="department" id="departmentMap">
 	<id property="deptId" column="dept_id"/>
 	<result property="deptTitle" column="dept_title"/>
 	<result property="locationId" column="location_id"/>
 	<!-- 1대 다수의 관계일때는 -->
 	<collection property="employees" resultMap="employeeMap"/>	
 </resultMap>
 <select id="selectAllDept" resultMap="departmentMap">
 	SELECT * FROM DEPARTMENT LEFT JOIN EMPLOYEE ON DEPT_CODE = DEPT_ID
 </select>
 
 
  <select id="selectEmployeeAll" resultMap="employeeMap">
	SELECT * FROM EMPLOYEE JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID  
  </select>
  <!-- 파라미터값을 가져올때 
  	#{} : setType()값을 대입 -> 자료형에 맞는 리터럴을 대입 -> 'emp_id'
  	${} : 문자열처리하는 표현 -> emp_id
   -->
  <select id="searchEmp" resultMap="employeeMap" parameterType="map">
  	SELECT * FROM (SELECT E.*, DECODE(SUBSTR(EMP_NO , 8 , 1), '1', 'M', '2', 'F') AS GENDER FROM EMPLOYEE E) 
  	WHERE 1=1
  	<!-- WHERE -->
  	<!-- <where> -->
  	<!-- <trim prefix="WHERE" prefixOverrides="AND|OR"> -->
  	<if test="keyword !=null and keyword == ''">  <!-- 공란으로 넘어오는것도 조건으로 줘야됨 input태그는 공란이 넘어가기때문에 -->
  		AND ${type} LIKE '%'||#{keyword}||'%'
  	</if> 
  	<if test="gender != null and gender != ''">
  		AND gender = #{gender}
  	</if>
  	<if test="salary != null and salary != ''">
  		<if test="salFlag == 'ge'">
  			<!-- AND salary >= #{salary} -->
  			AND SALARY &gt;= #{salary}
  		</if>
  		<if test="salFlag == 'le'">
  			<!-- AND salary <![CDATA[<=]]> #{salary} -->
  			AND SALARY &lt;= #{salary}
  		</if>
  	</if>
  	<if test="deptCode != null and deptCode != ''">
  		AND DEPT_CODE IN
  		<!--
  			forEach문을 사용할 수 있다.
  			속성
  			collection : 배열방식의 데이터
  			item : 배열의 데이터를 저장하는 변수명
  			open : 반복을 시작할때 출력할 값을 설정
  			close : 반복을 끝났을때 출력할 값을 설정
  			separator : 반복할때마다 출력할 값을 설정
  			index : 배열의 인덱스번호를 저장하는 변수
  		  -->
  		  <foreach collection="deptCode" open="(" close=")" separator="," item="d">
  		  	#{d}
  		  </foreach>
  	</if>
  	<if test="jobCode != null and jobCode != ''">
  		AND JOB_CODE IN
  		<foreach collection="jobCode" open="(" close=")" separator="," item="j">
  			#{j}
  		</foreach>
  		
  	</if>
  	<if test="hireDate != null and hireDate != ''">
  		<if test="dateFlag == ge">
  			AND HIRE_DATE &gt;= #{hireDate}
		</if>
		<if test="dateFlag == le">
			AND HIRE_DATE &lt;= #{hireDate}
		</if>  	
  	</if>
  	<!-- </trim> -->
  	<!-- </where> -->
  </select>
</mapper>
