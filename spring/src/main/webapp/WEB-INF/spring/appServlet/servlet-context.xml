<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 어노테이션되어있는 객체들을 모두 저장시키고 불러올수 있도록 만들어줌 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.bs.spring" />
	<!-- 
		pojo클래스 bean으로 등록하기
		<beans:bean>태그를 이용해서 등록
			속성 
			id : context내에서 사용하는 bean이름
			class : 대상이 되는 클래스지정(패키지명.클래스명)
	 -->
	 <!-- Animal클래스를 default생성자로 생성해서 bean으로 등록 -->
	<!-- <beans:bean id="bbo" class="com.bs.spring.bintest.Animal"/> -->
	<!-- pojo생성시 setter를 이용해서 데이터를 넣어서 생성시키기 -->
	<!-- <beans:bean id="bbo" class="com.bs.spring.bintest.Animal">
		<beans:property name="name" value="뽀숑"/>
		<beans:property name="age" value="3"/>
		<beans:property name="height" value="50.4"/>
	</beans:bean> -->
	<!-- 매개변수에 있는 생성자를 이용해서 생성시키기 -->
	<beans:bean id="bbo" class="com.bs.spring.bintest.Animal">
		<beans:constructor-arg index="0" value="뽀숑"/>
		<beans:constructor-arg index="1" value="3"/>
		<beans:constructor-arg index="2" value="50.4"/> <!-- 만약 2개만 매개변수로 받는 생성자가 없을시 갯수를 맞춰줘야함(그래서 만약에 2개만 하고 싶으면 DTO에서 매개변수를 2개만 받는 생성자를 만들어 준다.) -->
		<!-- 나중에 gson이나 json들을 bean으로 등록해서 사용하면 된다. -->
	</beans:bean>
	<beans:bean id="dog" class="com.bs.spring.bintest.Animal">
		<beans:property name="name" value="뽀삐"/>
	</beans:bean>
	
	<!-- init-method, destroy-method 속성을 사용했을때 객체가 생성하고 소멸할때 자동으로 메소드 클래스를 생성하도록 설정할수 있다.  -->
	<beans:bean id="emp" class="com.bs.spring.bintest.Employee" init-method="initialMethod" destroy-method="destroyMethod">
		<beans:property name="name" value="최주영"/>
		<beans:property name="age" value="24"/>
		<beans:property name="address" value="경기도 안양시"/>
		<beans:property name="salary" value="100"/>
		<beans:property name="dept" ref="dept"/>
	</beans:bean>
	<beans:bean id="emp2" class="com.bs.spring.bintest.Employee">
		<beans:constructor-arg index="0" ref="dept"/>
	</beans:bean>
	<beans:bean id="dept" class="com.bs.spring.bintest.Department">
		<beans:constructor-arg index="0" value="1"/>
		<beans:constructor-arg index="1" value="개발부"/>
		<beans:constructor-arg index="2" value="판교"/>
	</beans:bean>
	<!-- 등록하는 bean이 다른클래스와 연관관계(참조)가 설정되어있을 때는 
		다른 bean을 등록해야한다.
		ref속성을 이용해서 설정한다.
	-->
	<!--  	<beans:bean id="memberSerivce" Dao나 service 메소드를 각각 집어넣어서 만들수 있다.
	class="com.bs.spring.member.model.service.MemberServiceImpl">
		<beans:constructor-arg index="0" ref="sessionTemplate"/>
		<beans:constructor-arg index="1" ref="memberDao"/>
	</beans:bean>  -->
	
	<!-- <beans:import resource=""/> 다른곳에서 설정된 xml파일을 불러올때 이렇게 사용 -->
	
	<!-- 인터셉터 등록하기 -->
	<interceptors>
		<interceptor>
			<mapping path="/demo/*"/>
			<!-- <exclude-mapping path="/demo/demo.do"/> --> <!-- 여기서 이 주소는 인터셉터에서 빼줘라 라는 설정 -->
			<beans:bean class="com.bs.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		<!--  <interceptor>
			<mapping path="/demo/selectAllDemo.do"/>
			<mapping path="/memo/*"/>
			<beans:ref bean="loginCheck"/>
		</interceptor>
		<interceptor>
			<mapping path="/memo/insertmemo.do"/>
			<beans:ref bean="memoCheck"/>
		</interceptor> -->
		
	</interceptors>
	
	<beans:bean id="loginCheck" class="com.bs.spring.common.interceptor.LoginCheckInterceptor"/>
	<beans:bean id="memoCheck" class="com.bs.spring.common.interceptor.AdminCheckInterceptor"/>
</beans:beans>